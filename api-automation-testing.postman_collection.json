{
	"info": {
		"_postman_id": "e62067cc-2f3a-4132-ac32-672e5d57e2a3",
		"name": "api-automation-testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32171096"
	},
	"item": [
		{
			"name": "Maria",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Verify response call\", function(){\r",
							"    pm.response.to.have.status('OK');\r",
							"})\r",
							"\r",
							"pm.test(\"Verify data types to response\", function(){\r",
							"    pm.expect(responseJson.name).to.be.a('string');\r",
							"    pm.expect(responseJson.gender).to.be.a('string');\r",
							"    pm.expect(responseJson.probability).to.be.a('number');\r",
							"})\r",
							"\r",
							"pm.test(\"Verify values of name and gender\",function(){\r",
							"    pm.expect(responseJson.name).to.equals(\"maria\");\r",
							"    pm.expect(responseJson.gender).to.equals(\"female\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}maria",
					"host": [
						"{{base_url}}maria"
					]
				}
			},
			"response": []
		},
		{
			"name": "Peter , Maria",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\",function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate data type\", function () {\r",
							"     var responseJSON = pm.response.json();\r",
							"     \r",
							"     pm.expect(responseJSON).to.be.an('array');\r",
							"     responseJSON.forEach((item) => {\r",
							"            pm.expect(item).to.be.an('object');\r",
							"            pm.expect(item.count).to.be.a('number');\r",
							"            pm.expect(item.name).to.be.a('string');\r",
							"            pm.expect(item.gender).to.be.a('string');\r",
							"            pm.expect(item.probability).to.be.a('number');\r",
							"     });\r",
							"});\r",
							"\r",
							"pm.test(\"Verify response data type\",function(){\r",
							"    var responseJson = pm.response.json();\r",
							"    pm.expect(responseJson[0].name).to.be.equals(\"peter\");\r",
							"    pm.expect(responseJson[0].gender).to.be.equals(\"male\");\r",
							"    pm.expect(responseJson[1].name).to.be.equals(\"maria\");\r",
							"    pm.expect(responseJson[1].gender).to.be.equals(\"female\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url1}}name[]=peter&name[]=maria",
					"host": [
						"{{base_url1}}name[]=peter&name[]=maria"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{Token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}